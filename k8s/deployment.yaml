apiVersion: apps/v1
kind: Deployment
metadata:
  name: globeco-fix-engine
  namespace: globeco
  labels:
    app: globeco-fix-engine
spec:
  replicas: 1
  selector:
    matchLabels:
      app: globeco-fix-engine
  template:
    metadata:
      labels:
        app: globeco-fix-engine
    spec:
      containers:
        - name: globeco-fix-engine
          image: kasbench/globeco-fix-engine:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8085
          env:
            # Inject the node and pod metadata from the Downward API
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: MY_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: MY_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            # Inject the node IP from the Downward API
            - name: NODE_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP

            # Point OTEL exporter to the local collector on the same node
            
            - name: OTEL_METRICENDPOINT
              value: "$(NODE_IP):4317"

            - name: OTEL_TRACEENDPOINT
              value: "$(NODE_IP):4317"

            # Define standard service identity attributes
            - name: OTEL_SERVICE_NAME
              value: "globeco-fix-engine"  # Fixed to match actual service name
            - name: OTEL_SERVICE_NAMESPACE
              value: "globeco"
            
            # Log level configuration
            - name: LOG_LEVEL
              value: "info"
            
            # Inject Kubernetes metadata as resource attributes for k8sattributes processor
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: >-
                k8s.pod.ip=$(MY_POD_IP),
                k8s.pod.name=$(MY_POD_NAME),
                k8s.node.name=$(MY_NODE_NAME),
                k8s.namespace.name=$(MY_NAMESPACE)

          resources:
            requests:
              cpu: 100m
              memory: 200Mi
            limits:
              cpu: 1000m
              memory: 1000Mi
          livenessProbe:
            httpGet:
              path: /healthz
              port: 8085
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 240
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: 8085
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
          # startupProbe:
          #   httpGet:
          #     path: /healthz
          #     port: 8080
          #   initialDelaySeconds: 5
          #   periodSeconds: 10
          #   timeoutSeconds: 5
          #   failureThreshold: 30
